package union_find;

import java.util.Arrays;

// lc 928.尽量减少恶意软件的传播 Ⅱ
public class MinimizeMalwareSpreadII {

    private static final int MAX_SIZE = 301;

    private static final boolean[] isVirus = new boolean[MAX_SIZE];

    private static final int[] counts = new int[MAX_SIZE];

    private static final int[] sources = new int[MAX_SIZE];

    private static final int[] father = new int[MAX_SIZE];

    private static final int[] size = new int[MAX_SIZE];

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        build(n, initial);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1 && !isVirus[i] && !isVirus[j]) {
                    union(i, j);
                }
            }
        }
        for (int source : initial) {
            for (int i = 0; i < n; i++) {
                if (i != source && !isVirus[i] && graph[source][i] == 1) {
                    int fi = find(i);
                    if (sources[fi] == -1) {
                        sources[fi] = source;
                    } else if (sources[fi] != -2 && sources[fi] != source) {
                        sources[fi] = -2;
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (i == find(i) && sources[i] >= 0) {
                counts[sources[i]] += size[i];
            }
        }
        Arrays.sort(initial);
        int ans = initial[0], max = counts[ans];
        for (int i : initial) {
            if (counts[i] > max) {
                ans = i;
                max = counts[i];
            }
        }
        return ans;
    }

    private void build(int n, int[] initial) {
        for (int i = 0; i < n; i++) {
            isVirus[i] = false;
            counts[i] = 0;
            sources[i] = -1;
            father[i] = i;
            size[i] = 1;
        }
        for (int i : initial) {
            isVirus[i] = true;
        }
    }

    private int find(int i) {
        if (i != father[i]) {
            father[i] = find(father[i]);
        }
        return father[i];
    }

    private void union(int x, int y) {
        int fx = find(x);
        int fy = find(y);
        if (fx != fy) {
            father[fx] = fy;
            size[fy] += size[fx];
        }
    }
}
